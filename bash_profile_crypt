#!/bin/bash
#
# Copyright (C) 2016, Andrew Kroshko, all rights reserved.
#
# Author: Andrew Kroshko
# Maintainer: Andrew Kroshko <akroshko.public+devel@gmail.com>
# Created: Tue May 25, 2016
# Version: 20160716
# URL: https://github.com/akroshko/crypt-profiles
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/.

# TODO: possibly make pinentry-select a dot file in ~
################################################################################
## this section initializes the GPG key
# start up the agents
# from https://wiki.archlinux.org/index.php/GnuPG#gpg-agent

# TODO: still some issues with running this in batch mode, but can just send password everytime and it's pretty good
#       might cause efficiency issues if too much authentication/profile

main () {
    local TRYAGAIN=y
    local TOPSECRET=
    local GNUPGPWD=
    # get entered password if necessary
    if [[ -n "$1" ]]
    then
        local GNUPGPWD="$1"
    fi
    # stop this from being run as root, just in case
    h1 "Running $(basename $BASH_SOURCE)"
    if [[ $EUID -ne 0 ]]
    then
        # XXXX: don't want something so severe in the future
        pkill -9 -f gnome-keyring-daemon
        pkill -9 pinentry
        # initializes and add important functions
        source $(dirname "${BASH_SOURCE[0]}")/bash_env_crypt
        source $(dirname "${BASH_SOURCE[0]}")/bashrc_functions_crypt
        # test if we can decrypt, make non-interactive by linking linking pinentry to /bin/false
        if [[ -f "${HOME}/bin/pinentry-select" ]]; then
            rm -f "${HOME}/bin/pinentry-select"
        fi
        ln -s /bin/false "${HOME}/bin/pinentry-select"
        if [[ -f ${HOME}/.secrets/secrets.txt.gpg ]]; then
            # TODO: maybe incorporate dummy file instead of secrets to try
            DISPLAY= gpg2-batch --decrypt ${HOME}/.secrets/secrets.txt.gpg >/dev/null
        fi
        if [[ $? != 0 ]]; then
            # reset everything properly if key for GPG profile expired or set up wrong
            msg "Resetting agents!"
            killall-agents
        else
            msg "Decrypt OK! Skipping resetting gpg agent!"
        fi
        # set up to force pinentry-curses for this particular program
        # otherwise there is an issue with pinentry popping up on a remote
        # X11 display when logging in remotely
        # TODO: describe this issue with GnuPG in documentation
        # keep pinentry disabled when using $1=$GNUPGPWD because shell is generally non-interactive
        if [[ -z "$GNUPGPWD" ]]
        then
            if [[ -f "${HOME}/bin/pinentry-select" ]]; then
                rm -f "${HOME}/bin/pinentry-select"
            fi
            if [[ -f /usr/bin/pinentry-curses ]]; then
                ln -s /usr/bin/pinentry-curses "${HOME}/bin/pinentry-select"
            fi
        fi
        # run keychain after we see if we need to kill agents
        if type -P keychain >/dev/null 2>&1; then
            `type -P keychain` --nogui --agents ssh
            source ${HOME}/.keychain/*-sh >/dev/null
        fi
        msg "Keychain done!"
        # set up normally if no passphrase given
        while [[ -z $TOPSECRET  && "$TRYAGAIN" == "y" ]]; do
            # XXXX: might be problems here without other agents started by other programs
            if [[ -e "$envfile" ]] && kill -0 "$(grep GPG_AGENT_INFO $envfile | cut -d: -f 2)" 2>/dev/null; then
                # eval "$(DISPLAY= cat "$envfile")"
                msg "Sourcing envfile!"
                DISPLAY= source $envfile
                export GPG_AGENT_INFO
            else
                msg "Starting new agent!"
                eval "$(DISPLAY= gpg-agent --daemon --allow-preset-passphrase --write-env-file $envfile)"
            fi
            if [[ -f ${HOME}/.secrets/secrets.txt.gpg ]]; then
                if [[ -n "$GNUPGPWD" ]]
                then
                    msg "Using entered password!"
                    local TOPSECRET="$(DISPLAY= gpg2-batch --passphrase-fd 0 --decrypt --use-agent ${HOME}/.secrets/secrets.txt.gpg <<< "$GNUPGPWD")"
                else
                    local TOPSECRET="$(DISPLAY= gpg2-batch --decrypt --use-agent ${HOME}/.secrets/secrets.txt.gpg)"
                    if [[ $? != 0 ]]; then
                        # TODO: add real option for quit
                        while read -r -t 0;do read -r; done;
                        read -n 1 -p "Error decrypting such as bad password.  Try again (y/n/q)? " TRYAGAIN
                        echo ""
                    fi
                fi
            else
                # file not present, break by killing appropriate functions
                local TRYAGAIN=
                local TOPSECRET=
            fi
        done
    fi
    msg "Initializing gpg-agent done!"
    h2 "Initializing or reinitializing ssh keys"
    # open the top secret keyfile first
    # TODO: make a seperate function to initialize SSH
    if [[ ! -z $TOPSECRET ]]
    then
        # add identity to gpg-agent
        if [[ -z $GNUPGPWD ]]
        then
            msg "Retrieving master password!"
            local GNUPGPWD=`sed -n '1p' <<< "$TOPSECRET"`
        fi
        # need to do with fingerprints for both main and subkeys!!!!
        # TODO: possibly need to test for gpg-preset-passphrase working properly
        #       will clearing the agent deal with sleep and hibernation issues?
        # TODO: not working here, PRESETGPGKEYS not being loaded
        if [[ -z ${PRESETGPGKEYS} ]]; then
            warn "No preset keys!"
        fi
        for PRESETKEY in ${PRESETGPGKEYS}; do
            msg "Presetting: $PRESETKEY"
            /usr/lib/gnupg2/gpg-preset-passphrase --verbose --preset "$PRESETKEY" <<< "$GNUPGPWD"
        done
        if [[ -f "${HOME}/.gnupg/gpg-agent-info-$(hostname)" ]]; then
            source "${HOME}/.gnupg/gpg-agent-info-$(hostname)"
            export GPG_AGENT_INFO
        fi
        ################################################################################
        ## initialize ssh keys only if agent is live
        # read in all id_*.txt.gpg
        for PWDFILE in ${HOME}/.secrets/id_*.txt.gpg; do
            if [[ -f "${PWDFILE}" ]]; then
                local KEYFILE=$(basename ${PWDFILE%.txt.gpg})
                h2 "key for ${KEYFILE}"
                local TOPSECRET="$(DISPLAY= gpg2-batch --no-tty --decrypt --use-agent $PWDFILE)"
                if [[ $? == 0 ]]; then
                    local KEYPWD=$(sed -n '1p' <<< "$TOPSECRET")
expect << EOF
  spawn ssh-add -t 2419200 ${HOME}/.ssh/${KEYFILE}
  expect "Enter passphrase"
  send "$KEYPWD\r"
  expect eof
EOF
                    msg "Decrypt successful for ${PWDFILE}!"
                else
                    warn "Decrypt failed for ${PWDFILE}!"
                fi
            fi
        done
    else
        warn "Skipping initialization of passwords!!!"
    fi
    # reset curses pinentry for this particular program
    if [[ -f "${HOME}/bin/pinentry-select" &&  -f /usr/bin/pinentry-gtk-2 ]]
    then
        rm -f "${HOME}/bin/pinentry-select"
        # TODO: pinentry-x11 is cool too
        ln -s /usr/bin/pinentry-gtk-2 "${HOME}/bin/pinentry-select"
    fi
    h1-end "Finishing $(basename $BASH_SOURCE)"
}
main "$1"
