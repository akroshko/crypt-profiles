#!/bin/bash
#
# Copyright (C) 2016, Andrew Kroshko, all rights reserved.
#
# Author: Andrew Kroshko
# Maintainer: Andrew Kroshko <akroshko.public+devel@gmail.com>
# Created: Tue May 25, 2016
# Version: 20160716
# URL: https://github.com/akroshko/bash-stdlib
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/.

################################################################################
# functions useful for external use without all the other crypt_profiles functionality

ssh-key-info () {
    # get information on an SSH key
    ssh-keygen -lf "$1"
}

kill-freespace-random-file () {
    # wipe freespace by filling a random file until it stops working
    # this function runs faster than the hard disk itself on modern machines
    # TODO: fill reserved space as well, this one works as normal user so will not do that
    # TODO: add guideline how long this takes on my machines as a guideline
    # TODO: add a helpfile
    #
    # References
    # http://serverfault.com/questions/6440/is-there-an-alternative-to-dev-urandom
    # time openssl enc -aes-256-ctr -pass pass:"$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64)" -nosalt < /dev/zero | pv -pterb > ~/randomfile.bin
    local ROOTPATH="$1"
    if [[ -z "$ROOTPATH" ]]; then
        echo "Must specific directory corresponding to device to kill space on!!!"
    fi
    if [[ -e "$ROOTPATH"/randomfile.bin ]]; then
        rm "$ROOTPATH"/randomfile.bin
    fi
    # check if I can run a command with elevated priveleges
    # TODO:: not sure mbuffer is necessary
    # time openssl enc -aes-256-ctr -pass pass:"$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64)" -nosalt < /dev/zero | mbuffer -D 16384M -m 2048M -s 64k -A /bin/false -f -o "$ROOTPATH"/randomfile.bin
    # TODO: it fluxuates, not sure why this is?
    # TODO: run filling as root, but optionally don't use root and/or su to current user
    # TODO: consider possibility of a small file too
    # use ${USERNAME} to ensure that things are good
    if (( $(cat /proc/meminfo | grep --color=never MemTotal | awk '{print $2}') < "4194304" )); then
       local BUFSIZE=512M
    else
       local BUFSIZE=2048M
    fi
    echo "Using buffer size $BUFSIZE!"
    sudo true
    sudo -i su root <<EOF
time openssl enc -aes-256-ctr -pass pass:"$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64)" -nosalt < /dev/zero | mbuffer -m "$BUFSIZE" -s 64k -A /bin/false -f -o "$ROOTPATH"/randomfile.bin
sync
sleep 60
sync
sleep 60
echo "Size of written file:"
du -sh "$ROOTPATH"/randomfile.bin
du -shb "$ROOTPATH"/randomfile.bin
rm "$ROOTPATH"/randomfile.bin
EOF
}

kill-drive-random-data () {
    # TODO: ask if we are sure and add some better checks
    # use openssl to write random data to disks, much faster than /dev/urandom and appropriate for this
    local USAGE="Usage: kill-drive-random-data <<device name>>

<<device name>> device to fill with random data"
    if [[ ! -z "$1" && -b "$1" ]]; then
        time {
            openssl enc -aes-256-ctr -pass pass:"$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64)" -nosalt < /dev/zero | pv -pterb | sudo dd of="$1" bs=64k
        }
    else
        yell "File $1 is non-existent or not a block device!!!"
        echo "$USAGE"
    fi
}

write-random-data () {
    # use openssl to write random data, useful for generating files for benchmarking and tests
    local USAGE="Usage: write-random-data <<size in gb>> <<output file>>

  <<size in gb>>      number of gigs of random data to generate

  <<output filename>> filename to write"
    if [[ ! -z $1 && ! -z $2 ]]; then
        time openssl enc -aes-256-ctr -pass pass:"$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64)" -nosalt < /dev/zero | pv -pterb --size "$1"g --stop-at-size > "$2"
    else
        echo "$USAGE"
    fi
}

write-random-data-stdout () {
    # use openssl to write random data to stdout, useful for filling
    # pipes to generate files for benchmarking and tests
    # TODO: write usage to stderr, for everything
    # XXXX: untested
    local USAGE="Usage: write-random-data <<size in gb>>

  <<size in gb>>      number of gigs of random data to generate"
    # TODO: probably a better way to do this
    if [[ ! -z $1 ]]; then
        time openssl enc -aes-256-ctr -pass pass:"$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64)" -nosalt < /dev/zero | pv -pterb --size "$1"g --stop-at-size
    else
        echo "$USAGE"
    fi
}

# TODO: decide whether elevated privileages is necessary for these commands

kill-file () {
    # XXXX: dangerous functions for convenience in batch mode
    if [[ -f "$1" ]]; then
        msg "Killing $1"
        bleachbit --shred "$1"
    else
        # TODO: warn if not file
        warn "File $1 is not a file, does not exist, and is not cleared!"
    fi
}

kill-recursive () {
    # XXXX: dangerous functions for convenience in batch mode
    if [[ -e "$1" ]]; then
        bleachbit --shred "$1"
        msg "Clearing directory $1"
    else
        warn "Directory $1 does not exist and not deleted!"
    fi
}

kill-file-contents () {
    # XXXX: dangerous functions for convenience in batch mode
    kill-file "$1"
    touch "$1"
}

kill-directory-contents () {
    # XXXX: dangerous functions for convenience in batch mode
    # TODO: find way to kill directories too for some uses, but without going haywire
    # XXXX: recursive, very dangerous!!!
    # TODO: test if empty and give warning
    if [[ -d "$1" ]]; then
        # TODO: might have problem if spaces somewhere, but this commands works well anyways
        #       runs the find command if anything appears
        if [[ -n "$(ls -A $1)" ]]; then
            msg "Clearing directory contents $1"
            find "$1" -mindepth 1 -exec bleachbit --shred {} \;

        else
            warn "Directory $1 empty and not cleared!"
        fi
    else
        warn "Directory $1 does not exist and not cleared!"
    fi
}

# TODO: give warning message, not quite same as above
kill-directory-files () {
    # XXXX: dangerous functions for convenience in batch mode
    # TODO: find way to kill directories too for some uses, but without going haywire
    # XXXX: recursive, very dangerous!!!
    if [[ -d "$1" ]]; then
        find "$1" -mindepth 1 -maxdepth 1 -exec bleachbit --shred {} \;
    fi
}

kill-directory-contents-preserve-structure () {
    # XXXX: dangerous functions for convenience in batch mode
    if [[ -d "$1" ]]; then
        # TODO: does this go into dot directories
        find "$1" -type f -exec bleachbit --shred {} \;
    fi
}

kill-find-matching () {
    # XXXX: dangerous functions for convenience in batch mode
    if [[ -d "$1" ]]; then
        # XXXX: double find a few milliseconds slower but gives good error messages
        if find "$1" -name "$2" | grep '.' >/dev/null; then
            find "$1" -name "$2" -exec bleachbit --shred {} \;
        else
            warn "Directory $1 exists but nothing matching $2 to be cleared!"
        fi
    else
        warn "Directory $1 does not exist so nothing mathcing $2 not cleared!"
    fi
}

kill-matching-line () {
    # XXXX: dangerous functions for convenience in batch mode
    if [[ -f "$1" ]]; then
        sed -i "/${1}/d" "$2"
    fi
}

super-password () {
    # generate a 30 character random password for many uses
    # XXXX: may not actually be a super password generator, needs to be security audited
    # TODO: decide whether to use GPG or openssl for this
    #
    # References:
    #   http://www.commandlinefu.com/commands/view/8869/generate-a-random-password-30-characters-long
    local RANDOMTIMES=$((($RANDOM % 113) + 151))
    # XXXX: is this loop a good or bad thing?
    for i in {1.."$RANDOMTIMES"}; do
        gpg-batch --gen-random --armor 1 30 >/dev/null
    done
    gpg-batch --gen-random --armor 1 30
}

super-password-easy () {
    # XXXX: 30 character only lowercase password that is slighly nicer
    # for humans to enter on mobile devices, etc.
    #
    # large enough that it is as hard as a 128 bit key to brute force
    #
    # if mobile devices become nicer
    local RANDOMTIMES=$((($RANDOM % 113) + 151))
    # XXXX: is this loop a good or bad thing?
    for i in {1.."$RANDOMTIMES"}; do
        openssl rand -base64 128 >/dev/null
    done
    # http://www.commandlinefu.com/commands/view/722/generate-a-random-password-30-characters-long
    openssl rand -base64 128 | grep -o '[a-z]' | head -n 30 | tr -d '\n'; echo
}


ssh-host-fingerprint () {
    # get the sshd fingerprints of the current host
    # TODO: no color for now
    echo `hostname`
    if [[ -f /etc/ssh/ssh_host_ecdsa_key.pub ]]; then
        echo '---------- ECDSA fingerprint'
        ssh-keygen -lf /etc/ssh/ssh_host_ecdsa_key.pub
        echo '---------- ECDSA public key'
        cat /etc/ssh/ssh_host_ecdsa_key.pub
    fi
    if [[ -f /etc/ssh/ssh_host_ed25519_key.pub ]]; then
        echo '---------- ED25519 fingerprint'
        ssh-keygen -lf /etc/ssh/ssh_host_ed25519_key.pub
        echo '---------- ED25519 public key'
        cat /etc/ssh/ssh_host_ed25519_key.pub
    fi
    if [[ -f /etc/ssh/ssh_host_rsa_key.pub ]]; then
        echo '---------- RSA fingerprint'
        ssh-keygen -lf /etc/ssh/ssh_host_rsa_key.pub
        echo '---------- RSA public key'
        cat /etc/ssh/ssh_host_rsa_key.pub
    fi
}

crypt-backup-extract () {
    # just decompress .lzo for now, allow selection
    # TODO: decompress appropriate compression file type
    # XXXX: do not use -v on tar, too slow
    gpg-batch --decrypt "$1" | mbuffer -q -m 4096M | lzop -d | mbuffer -m 4096M | tar --extract --file -
}

crypt-device-image-to-here () {
    # image a disk parition here
    # good for quick and dirty backups of disks on secondary machines before major modifications
    # TODO: will need to create and test a restore thing
    #       mbuffer limtted to easily fit on machines with 1G Ram
    sudo dd if=/dev/"$1" bs=64k conv=noerror,sync | lz4 | mbuffer -m 256M | gpg-batch --compress-algo none --cipher-algo AES256 --recipient "${CRYPTGPGUSER}" --output - --encrypt - | mbuffer -q -m 256M -s 64k -o ./"$HOSTNAME"-"$1"--$(date +%Y%m%d%H%M%S).lz4.gpg
}

ssh-clear-all-controlmaster () {
    true
}

ssh-kill-offending-key () {
    # TODO: backup?
    # TODO: do this automatically if there is already a good key?
    if [[ -n "$1" && "$1" =~ known_hosts ]]; then
        # TODO: how to split?
        local HOSTSFILE=$(echo "$1" | cut -d':' -f1)
        local LINENO=$(echo "$1" | cut -d':' -f2)
        if [[ -n "$HOSTSFILE" && -n "$LINENO" ]];then
            # delete appropriate line
            echo "Deleting ${LINENO} in ${HOSTSFILE}!!!"
            sed -i -e "${LINENO}d" "$HOSTSFILE"
        fi
    else
        warn "Must specific a known_hosts file and line number!"
    fi
}
